{"name":"P4-oo","tagline":"A tiny object-oriented library for dealing with Perforce","body":"# p4-oo [![Build Status](https://travis-ci.org/gcochard/p4-oo.svg)](https://travis-ci.org/gcochard/p4-oo)\r\n\r\n[![NPM](https://nodei.co/npm/p4-oo.png?compact=true)](https://nodei.co/npm/p4-oo/)\r\n\r\np4-oo is a tiny object-oriented library for dealing with Perforce. Since Perforce sets all files in its workspace as read-only, and expects you to check out any file before editing, automated build processes and whatnot can stumble when trying to write to the file system. This library gives you a simple module to get Perforce out of the way. It saves its state across commands, so you can change working directories and set environment variables, and those will persist for subsequent commands. This is very helpful if you have a centralized system which is running perforce commands on behalf of users.\r\n\r\n### [Code Coverage](coverage/lcov-report/)\r\n### [JSDoc](jsdoc/)\r\n\r\n\r\n## Installation\r\nGet the module from NPM\r\n```shell\r\n$ npm install p4-oo --save\r\n```\r\nInclude it in your project\r\n```js\r\nvar P4 = require(\"p4-oo\");\r\nvar p4 = new P4();\r\n```\r\n\r\n## API Reference\r\n### p4.edit(path, done)\r\nTell Perforce to open a file for editing\r\n```js\r\np4.edit(\"output.css\", function(err, stdout) {\r\n    if(err) console.error(err.message);\r\n    console.log(stdout);\r\n});\r\n```\r\n\r\n### p4.add(path, done)\r\nTell Perforce to add a file to the default pending changelist\r\n```js\r\np4.add(\"output.css\", function(err, stdout) {\r\n    if(err) console.error(err.message);\r\n    console.log(stdout);\r\n});\r\n```\r\n\r\n### p4.smartEdit(path, done)\r\nStart by asking Perforce (nicely) to open a file for editing. If that doesn't work, try adding the file.\r\n\r\nThis is really meant to be a catch-all for automated output from tools. If you're generating files, there's a good chance that they don't exist yet in the workspace, but they might.\r\n\r\n>Note: Since you're sending requests to your Perforce server with each of these commands, don't just run this willy-nilly on every file in your project or something silly like that.\r\n\r\n```js\r\np4.smartEdit(\"output.css\", function(err, stdout) {\r\n    if(err) console.error(err.message);\r\n    console.log(stdout);\r\n});\r\n```\r\n\r\n### p4.run(command, [args], done)\r\nRun a command directly, rather than through a proxying function. You can use this to call arbitrary commands, but if you find yourself using this often, feel free to submit a pull request updating the API or an issue describing the command and what you'd like to see returned.\r\n\r\n```js\r\np4.run(\"edit\", \"path/to/file\", function(err, stdout) {\r\n    if(err) console.error(err.message);\r\n    console.log(stdout);\r\n});\r\n\r\n// Without optional \"args\" arg\r\np4.run(\"info\", function(err, stdout) {\r\n    if(err) console.error(err.message);\r\n    console.log(stdout);\r\n});\r\n```\r\n\r\n### p4.setOpts(options)\r\nSet options for the child_process, these options persist across commands.\r\nAlso supports chaining.\r\n\r\n```js\r\np4.setOpts({env:{P4PORT:'perforce:1666',P4USER:'username',P4CONFIG:'.p4config'}});\r\np4.edit(\"output.css\", function(err, stdout) {\r\n    if(err) console.error(err.message);\r\n    console.log(stdout);\r\n    //user 'username' now has 'output.css' checked out\r\n});\r\n```\r\n\r\n### p4.cd(dir)\r\nChange working directory for the perforce child_process. This persists across commands.\r\nAlso supports chaining.\r\n\r\n```js\r\np4.cd('/').cd('dir');\r\np4.pwd();\r\n//returns '/dir'\r\n```\r\n\r\n### p4.stat(file,done)\r\nStats a file and returns a JSON object with the file's properties.\r\n\r\nShould look like the following:\r\n\r\n```json\r\n{ \r\n    \"depotFile\": \"//depot/output.css\",\r\n    \"clientFile\": \"/Users/username/workspace/output.css\",\r\n    \"isMapped\": true,\r\n    \"headAction\": \"edit\",\r\n    \"headType\": \"xtext\",\r\n    \"headTime\": \"1410890900\",\r\n    \"headRev\": \"25\",\r\n    \"headChange\": \"1184\",\r\n    \"headModTime\": \"1410890778\",\r\n    \"haveRev\": \"25\",\r\n    \"other\": [ { \r\n        \"Open\": \"user@other_workspace\",\r\n        \"Action\": \"edit\",\r\n        \"Change\": \"1189\" \r\n    } ] \r\n}\r\n```\r\n\r\nExample:\r\n```js\r\np4.stat('output.css', function(err,stats){\r\n    if(err) console.error(err.message);\r\n    console.dir(stats);\r\n});\r\n```\r\n\r\n### p4.statDir(directory,done)\r\nRuns p4 fstat * in the directory. Ignores errors regarding subdirectories not being in workspace. Output matches `p4.stat` schema.\r\n\r\n### p4.recursiveStatDir(directory,done)\r\nRuns p4.fstat ... in the directory. Does not ignore errors, as it is running using perforce's `under this dir` rather than shell glob.\r\n\r\n### p4.sync(filename,done)\r\nRuns p4 sync filename in cwd.\r\nIf file is already at latest revision, is not under client, or perforce errors otherwise, error object will be set.\r\nIf sync is successful, data will look like this:\r\n\r\n> //depot/output.css#25 - updating /Users/username/workspace/output.css\r\n\r\n```js\r\np4.sync('output.css',function(err,data){\r\n    if(err) console.error(err);\r\n    console.log(data);\r\n});\r\n```\r\n\r\n## Tests\r\nTests are written in mocha and have child_process.exec mocked in order to test all output. Test coverage is tracked with istanbul.\r\n\r\n## Contribution\r\nSend me a pull request!\r\n\r\nOriginally forked from [natelong/p4](https://github.com/natelong/p4)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}